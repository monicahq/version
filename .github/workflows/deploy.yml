name: Deploy

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
  release:
    types: [created]

  workflow_dispatch:

env:
  php-version: '8.2'
  node-version: 18

jobs:
  #############
  # Build
  #############
  build:
    runs-on: ubuntu-latest
    name: Build assets

    strategy:
      fail-fast: false

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP ${{ env.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.php-version }}
          extensions: mbstring, dom, fileinfo
          coverage: none
      - name: Check PHP Version
        run: php -v
      - name: Check Composer Version
        run: composer -V
      - name: Check PHP Extensions
        run: php -m

    # Composer
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Cache composer files
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ env.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ env.php-version }}-${{ hashFiles('**/composer.lock') }}
            ${{ runner.os }}-composer-${{ env.php-version }}
            ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

    # Yarn
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node-version }}
          cache: yarn
      - name: Install yarn dependencies
        run: yarn install --immutable
      - name: Lint files
        run: yarn run lint

      - name: Prepare environment
        run: |
          { \
            echo "VITE_PROD_SOURCE_MAPS=true"; \
          } | tee .env

      - name: Build assets
        run: yarn run build

      - name: Store assets
        uses: actions/upload-artifact@v4
        with:
          name: assets
          path: |
            public/build/**/*
            !public/build/**/*.map


  ######################
  # Deploy on fortrabbit
  ######################
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: build
    if: github.event_name != 'pull_request'

    environment: fortrabbit

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Download assets
        uses: actions/download-artifact@v4
        with:
          name: assets
          path: public/build

      - name: Configure Git
        run: |
          git config user.email $GIT_EMAIL
          git config user.name $GIT_USERNAME
        env:
          GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}

      - name: Create release files
        run: |
          echo $GITHUB_SHA | cut -c-8 > config/release
          echo $GITHUB_SHA > config/commit

      - name: Update .htaccess
        run: cp -f resources/.htaccess_production public/.htaccess

      - name: Commit everything
        run: |
          git add -A --force public config
          git commit -m "Build $($CURRENT_DATE_TIME)"
        env:
          CURRENT_DATE_TIME: "date +%Y-%m-%d:%H-%M"

      - name: Deploy
        run: |
          git remote add deploy $REPO_URL
          branch=$(git rev-parse --abbrev-ref HEAD)
          git push deploy $branch:master --force
        env:
          # This avoids a failure when the client does not know the SSH Host already
          GIT_SSH_COMMAND: "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
          REPO_URL: ${{ secrets.REPO_URL }}


  ############################
  # Create a release on sentry
  ############################
  # sentry:
  #   runs-on: ubuntu-latest
  #   name: Sentry release
  #   needs: deploy
  #   if: github.event_name != 'pull_request'

  #   environment: fortrabbit-sentry

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Create Sentry release
  #       uses: getsentry/action-release@v1
  #       env:
  #         SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  #         SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
  #         SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
  #       with:
  #         environment: ${{ secrets.SENTRY_ENVIRONMENT }}
